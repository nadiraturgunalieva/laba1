/* Упражнение 01. Различия в манипуляции строками (String) 
А) Перед main() в комментариях ответьте на вопросы и напишите соответствия С – С++ для
следующих функций(причем соответствия необязательно будут в виде функций) :
	1) strlen - string::length
	2) strcpy - аналога нет, пишем a = b
	3) strcmp - аналога нет
	4) strcat - someString.append
	5) someString[index] - someString.at(index)
	6) не имеет точного аналога, возможно использовать strcat/ctrncat - push_back
	7) нет аналога - pop_back

	Функции могут не иметь точного аналога в библиотеке другого языка из-за разных потребностей и фокуса на задачи, 
	которые решает каждый язык. Например, C++ имеет класс 'std::string', который инкапсулирует строку и предоставляет 
	удобные методы для работы с ней, в то время как в C работа с символьными массивами более низкоуровневая и гибкая. 
	
	Главная разница строк в С и С++: 

	Строки в C - массив элементов char с null-байтом в окончании;
	Строки в C++ - объект класса std::string с динамической памятью. */



#include <iostream>
#include <string>

int main() {
	setlocale(LC_ALL, "Rus"); //для работы русского языка в консоли, всё работает 
	/*но программа крашится, если вводить строку не на английском, а на русском, как исправить?*/

	std::string input;
	std::cout << "Введите строку: ";
	std::getline(std::cin, input);

	//удаление пробелов и пунктуационных знаков
	std::string sortedStr;
	for (char c : input) {
		if (!std::isspace(c) && !std::ispunct(c)) {
			sortedStr += std::tolower(c); //преобразование в нижний регистр и добавление к конечному результату
		}
	}

	//сортировка в алфавитном порядке
	for (size_t i = 0; i < sortedStr.length(); i++) {  //сортировка "пузырьком"(обменом); внешний цикл для каждого элемента
		for (size_t j = i + 1; j < sortedStr.length(); j++) { //внутр. цикл начин. с элемента, след. за текущ, и проходит по остатку строки
			if (sortedStr[i] > sortedStr[j]) { //на каждой итерации сравн. текущ. элемент sortedStr[i] со след. элементом sortedStr[j]
				char temp = sortedStr[i]; // если текущ. больше след., то они меняются местами с помощью времен. перем. temp
				sortedStr[i] = sortedStr[j];
				sortedStr[j] = temp;
			}
		}
	}

	std::cout << "Отсортированная строка: " << sortedStr << std::endl;
	return 0;
}
